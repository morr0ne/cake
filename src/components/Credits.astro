<style>
    @font-face {
        font-family: "Nimbus Mono";
        src: url("/NimbusMonoPS-Regular.ttf");
    }

    body {
        font-family: "Courier New", "Nimbus Mono", "Courier", "CourierPrimeSans",
            monospace;
        font-weight: 900;
        font-size: 16px;
    }
</style>

<div
    class="grid gap-0 grid-cols-2 grid-rows-2 h-screen w-screen bg-black text-credits-orange select-none"
    id="outro"
>
    <div class="row-span-2">
        <span id="lyrics"></span><span id="cursor">_</span>
    </div>
    <div class="" id="credits"></div>
    <div class="">
        <pre id="art" class="leading-[1.2]"></pre>
    </div>
</div>

<script>
    import { lyrics, type Lyric } from "./lyrics";
    import { credits } from "./credits";
    import { ASCII_ART } from "./ascii_art";

    const audio = new Audio("/portal_still_alive.mp3");

    const lyricsDiv = document.getElementById("lyrics")! as HTMLSpanElement;

    const creditsDiv = document.getElementById("credits")! as HTMLDivElement;

    const artDiv = document.getElementById("art")! as HTMLDivElement;

    const cursor = document.getElementById("cursor")! as HTMLSpanElement;

    setInterval(() => {
        if (cursor.style.visibility === "visible") {
            cursor.style.visibility = "hidden";
        } else {
            cursor.style.visibility = "visible";
        }
    }, 300);

    audio.addEventListener("canplaythrough", () => {
        const startTime = performance.now();

        startLyrics(startTime);
        startCredits(startTime);
    });

    async function startCredits(startTime: number) {
        creditsDiv.innerText = "\n".repeat(16);
        let creditIndex = 0;
        let startOffset = 9000;

        let previousLineDone = true;

        async function playSong() {
            const elasped = performance.now() - startTime;

            if (elasped < startOffset) {
                window.requestAnimationFrame(playSong);
                return;
            }

            if (previousLineDone) {
                const credit = credits[creditIndex];

                drawLine(credit).then(() => {
                    previousLineDone = true;
                });

                creditIndex++;
                previousLineDone = false;
            }

            window.requestAnimationFrame(playSong);
        }

        function drawLine(credit: string): Promise<void> {
            creditsDiv.innerText = creditsDiv.innerText.substring(
                creditsDiv.innerText.indexOf("\n") + 1,
            );

            return new Promise((resolve) => {
                let charIndex = 0;

                let id = setInterval(() => {
                    const char = credit[charIndex];

                    creditsDiv.innerHTML += char;
                    charIndex++;

                    if (charIndex >= credit.length) {
                        creditsDiv.innerText += "\n";

                        clearInterval(id);
                        resolve();
                    }
                }, 68.623562);
            });
        }

        window.requestAnimationFrame(playSong);
    }

    function startLyrics(startTime: number) {
        let expectedTime = 0;
        let lyricIndex = 0;

        let songStarted = false;
        let previousLineDone = true;

        function playSong() {
            const elasped = performance.now() - startTime;

            if (!songStarted && elasped >= 6850) {
                audio.play();
                songStarted = true;

                console.log(`Started playing audio after ${elasped}ms`);
            }

            if (previousLineDone && elasped >= expectedTime) {
                const lyric = lyrics[lyricIndex];

                if (lyric.asciiArt !== undefined) {
                    artDiv.innerText = ASCII_ART[lyric.asciiArt];
                }

                drawLine(lyric, elasped - expectedTime).then(() => {
                    previousLineDone = true;
                });

                expectedTime += lyric.duration;
                lyricIndex++;
                previousLineDone = false;
            }

            window.requestAnimationFrame(playSong);
        }

        function drawLine(lyric: Lyric, deviation: number): Promise<void> {
            switch (lyric.line) {
                case " ":
                    return new Promise((resolve) =>
                        setTimeout(resolve, lyric.duration - deviation),
                    );
                case "* ":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText += " ";
                            resolve();
                        }, lyric.duration - deviation);
                    });
                case "&":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText = "";
                            resolve();
                        }, lyric.duration - deviation);
                    });
                case "^":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText += "\n";
                            resolve();
                        }, lyric.duration - deviation);
                    });

                default:
                    return new Promise((resolve) => {
                        let charIndex = 0;

                        let id = setInterval(
                            () => {
                                const char = lyric.line[charIndex];

                                lyricsDiv.innerHTML += char;
                                charIndex++;

                                if (charIndex >= lyric.line.length) {
                                    if (!lyric.sameLine) {
                                        lyricsDiv.innerText += "\n";
                                    }

                                    clearInterval(id);
                                    resolve();
                                }
                            },
                            (lyric.duration - deviation) / lyric.line.length,
                        );
                    });
            }
        }

        window.requestAnimationFrame(playSong);
    }
</script>

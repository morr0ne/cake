<style>
    @font-face {
        font-family: "Nimbus Mono";
        src: url("NimbusMonoPS-Regular.ttf");
    }

    #outro {
        font-family: "Courier New", "Nimbus Mono";
        font-weight: 900;
        font-size: 16px;
    }
</style>

<div
    class="grid gap-0 grid-cols-2 grid-rows-2 h-screen bg-black text-credits-orange"
    id="outro"
>
    <!-- <div class="h-1">----------------------------</div>
    <div class="h-1">----------------------------</div> -->
    <div class="row-span-2"><span id="lyrics"></span></div>
    <div class="" id="credits">
        " "CreditsOutroText" "Gautam Babbar" "CreditsOutroText" "Ted Backman"
        "CreditsOutroText" "Kelly Bailey" "CreditsOutroText" "Jeff Ballinger"
        "CreditsOutroText" "Aaron Barber" "CreditsOutroText" "Jeep Barnett"
        "CreditsOutroText" "Jeremy Bennett" "CreditsOutroText" "Dan Berger"
        "CreditsOutroText" "Yahn Bernier" "CreditsOutroText" "Ken Birdwell"
        "CreditsOutroText" "Derrick Birum" "CreditsOutroText" "Mike Blaszczak"
        "CreditsOutroText" "Iestyn Bleasdale-Shepherd" "CreditsOutroText" "Chris
        Bokitch" "CreditsOutroText" "Steve Bond" "CreditsOutroText" "Matt Boone"
        "CreditsOutroText" "Antoine Bourdon" "CreditsOutroText"
    </div>
    <div class="">
        <pre id="art" class="leading-[1.2]"></pre>
    </div>
</div>

<script>
    import { lyrics, type Lyric } from "./lyrics";
    import { ASCII_ART } from "./ascii_art";

    const audio = new Audio("/portal_still_alive.mp3");

    const lyricsDiv = document.getElementById("lyrics")! as HTMLDivElement;

    const creditsDiv = document.getElementById("credits")! as HTMLDivElement;

    const artDiv = document.getElementById("art")! as HTMLDivElement;

    audio.addEventListener("canplaythrough", () => {
        const startTime = performance.now();

        let expectedTime = 0;
        let lyricIndex = 0;

        let songStarted = false;
        let previousLineDone = true;

        function playSong() {
            const elasped = performance.now() - startTime;

            if (!songStarted && elasped >= 6850) {
                audio.play();
                songStarted = true;

                console.log(`Started playing audio after ${elasped}ms`);
            }

            if (previousLineDone && elasped >= expectedTime) {
                const lyric = lyrics[lyricIndex];

                if (lyric.asciiArt !== undefined) {
                    artDiv.innerText = ASCII_ART[lyric.asciiArt];
                }

                drawLine(lyric, elasped - expectedTime).then(() => {
                    previousLineDone = true;
                });

                expectedTime += lyric.duration;
                lyricIndex++;
                previousLineDone = false;
            }

            window.requestAnimationFrame(playSong);
        }

        function drawLine(lyric: Lyric, deviation: number): Promise<void> {
            switch (lyric.line) {
                case " ":
                    return new Promise((resolve) =>
                        setTimeout(resolve, lyric.duration - deviation),
                    );
                case "* ":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText += " ";
                            resolve();
                        }, lyric.duration - deviation);
                    });
                case "&":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText = "";
                            resolve();
                        }, lyric.duration - deviation);
                    });
                case "^":
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            lyricsDiv.innerText += "\n";
                            resolve();
                        }, lyric.duration - deviation);
                    });

                default:
                    return new Promise((resolve) => {
                        let charIndex = 0;

                        let id = setInterval(
                            () => {
                                const char = lyric.line[charIndex];

                                lyricsDiv.innerHTML += char;
                                charIndex++;

                                if (charIndex >= lyric.line.length) {
                                    if (!lyric.sameLine) {
                                        lyricsDiv.innerText += "\n";
                                    }

                                    clearInterval(id);
                                    resolve();
                                }
                            },
                            (lyric.duration - deviation) / lyric.line.length,
                        );
                    });
            }
        }

        window.requestAnimationFrame(playSong);
    });
</script>
